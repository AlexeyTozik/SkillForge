---
# Storage class: хранит переменные подключения (URL, creds, types, SSL)
# PersistantVolumeClaim: описывает требования к тому. Это объект, в рамках которого мы указываем свои ожидания к будущему подклюаемому volume PV
# PersistantVolume: хранит параметры и статус тома
#
# volumes:
#   - name:  mypd
#     persistantVolumeClaim:
#       claimName: myClaim
#
# Пример работы:
# Есть некое приложение. Есть storageClass NFS. Есть ссылка на PVC, где описано, что хотим 50GB.
# Есть список PV (NFS PV 1 50 Gb, NFS PV 2 100 GB, RBD PV 3 100GB)
# Любой из первых 2 томов можно подключать к приложению (к примеру 1-ый). Статус становится BOUND. Теперь он занят
# Новое приложение с 50GB PVC -> берём 2-ой PV (100GB), так как 1-ый уже занят

apiVersion: app/v1
kind: Deployment
metadata:
  name: fileshare
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fileshare
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: fileshare
    spec:
      initContainers:
      - image:  busybox
        name: mount-permissions-fix
        command: ["sh", "-c", "chmod 777 /data"]
        volumeMounts:
        - name: data
          mountPath: /data
      containers:
      - image: centosadmin/reloadable-nginx:1.12
        name: nginx
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 50m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d
        - name: data
      volumes:
        - name: config
          configmap: fileshare
        - name: data
          persistentVolumeClaim:
            claimName: fileshare
...